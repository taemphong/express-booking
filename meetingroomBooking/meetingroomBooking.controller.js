import BookingService from "./meetingroomBooking.service.js";
import { sendBookingNotification } from "../notification/notification.service.js";
import { validationResult } from "express-validator";
import UserService from "../users/user.service.js";
import MeetingRoomService from "../meetingroom/meetingroom.service.js";
import nodemailer from "nodemailer";
import moment from "moment";

//‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏°‡∏±‡πâ‡∏¢‡∏à‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÄ‡∏°‡∏•‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö admin ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
export const addBookingController = async (req, res) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({
      status: "fail",
      code: 0,
      message: "Validation errors",
      errors: errors.array(),
    });
  }

  const bookingData = {
    user_id: req.body.user_id,
    room_id: req.body.room_id,
    booking_date: req.body.booking_date,
    start_time: req.body.start_time,
    end_time: req.body.end_time,
    purpose: req.body.purpose || null,
    status: "pending",
  };

  try {
    const bookingService = new BookingService();

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const isRoomAvailable = await bookingService.checkRoomAvailability(
      bookingData.room_id,
      bookingData.booking_date,
      bookingData.start_time,
      bookingData.end_time
    );

    if (!isRoomAvailable) {
      return res.status(400).send({
        status: "fail",
        code: 0,
        message: "Room is not available for the selected time",
        result: "",
      });
    }

    // ‡∏ñ‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
    const result = await bookingService.insertBooking(bookingData);
    if (result.insertId) {
      const historyData = {
        booking_id: result.insertId,
        action: "created",
        performed_by: bookingData.user_id,
      };
      await bookingService.insertBookingHistory(historyData);
      // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•
      await sendBookingNotification(bookingData);
      res.status(201).send({
        status: "success",
        code: 1,
        message: "Booking added successfully",
        result,
      });
    } else {
      res.status(400).send({
        status: "fail",
        code: 0,
        message: "Booking could not be added",
        result: "",
      });
    }
  } catch (error) {
    console.log(error);
    res.status(500).send({
      status: "fail",
      code: 0,
      message: error.message,
      result: "",
    });
  }
};

//‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
export const getBookingsController = async (req, res) => {
  try {
    const bookings = await new BookingService().getAllBookings();
    res.status(200).send({
      status: "success",
      code: 1,
      message: "Bookings fetched successfully",
      result: bookings,
    });
  } catch (error) {
    console.log(error);
    res.status(500).send({
      status: "fail",
      code: 0,
      message: error.message,
      result: "",
    });
  }
};

// ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏áuser
export const getUserBookingsController = async (req, res) => {
  const { user_id } = req.params;

  try {
    const bookings = await new BookingService().getBookingsByUserId(user_id);

    if (bookings.length > 0) {
      res.status(200).send({
        status: "success",
        code: 1,
        message: "User bookings fetched successfully",
        result: bookings,
      });
    } else {
      res.status(404).send({
        status: "fail",
        code: 0,
        message: "No bookings found for this user",
        result: "",
      });
    }
  } catch (error) {
    console.log(error);
    res.status(500).send({
      status: "fail",
      code: 0,
      message: error.message,
      result: "",
    });
  }
};

//‡∏î‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πàconfirm‡πÅ‡∏•‡πâ‡∏ß‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô
export const getConfirmedBookingsController = async (req, res) => {
  try {
    const confirmedBookings = await new BookingService().getConfirmedBookings();
    res.status(200).send({
      status: "success",
      code: 1,
      message: "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
      result: confirmedBookings,
    });
  } catch (error) {
    res.status(500).send({
      status: "fail",
      code: 0,
      message: error.message,
    });
  }
};


//‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
export const deleteBookingController = async (req, res) => {
  const { booking_id } = req.params;

  try {
    const bookingService = new BookingService();
    const result = await bookingService.deleteBooking(booking_id);

    if (result.affectedRows > 0) {
      res.status(200).send({
        status: "success",
        code: 1,
        message: "Booking deleted successfully",
        result,
      });
    } else {
      res.status(404).send({
        status: "fail",
        code: 0,
        message: "Booking not found",
        result: "",
      });
    }
  } catch (error) {
    console.log(error);
    res.status(500).send({
      status: "fail",
      code: 0,
      message: error.message,
      result: "",
    });
  }
};

//‡∏ù‡∏±‡πà‡∏á Admin
// ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô pending ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
export const getPendingBookings = async (req, res) => {
  const bookingService = new BookingService();
  try {
    const pendingBookings = await bookingService.getPendingBookings();
    res.status(200).json({
      status: "success",
      bookings: pendingBookings,
    });
  } catch (error) {
    res.status(500).json({
      status: "fail",
      message: error.message,
    });
  }
};

// ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
export const approveBooking = async (req, res) => {
  const bookingId = req.params.id;
  const bookingService = new BookingService();
  const userService = new UserService();
  const meetingRoomService = new MeetingRoomService(); 

  try {
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô 'confirm'
    const result = await bookingService.updateBookingStatus(
      bookingId,
      "confirm"
    );
    if (result.affectedRows > 0) {
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
      const booking = await bookingService.getBookingById(bookingId);
      if (!booking || !booking.user_id || !booking.room_id) {
        return res.status(404).json({
          status: "fail",
          message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°",
        });
      }

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å user_id
      const user = await userService.getUserById(booking.user_id);
      if (!user || !user.email) {
        return res.status(404).json({
          status: "fail",
          message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ",
        });
      }

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏à‡∏≤‡∏Å room_id
      const meetingRoom = await meetingRoomService.getMeetingRoomById(
        booking.room_id
      );
      if (!meetingRoom || !meetingRoom.room_name) {
        return res.status(404).json({
          status: "fail",
          message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°",
        });
      }

      // ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Nodemailer
      const transporter = nodemailer.createTransport({
        service: "gmail",
        auth: {
          user: process.env.EMAIL_USER,
          pass: process.env.EMAIL_PASS,
        },
      });

      const bookingDate = moment(booking.booking_date).format("DD/MM/YYYY");

      const emailHtml = `
            <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #e0e0e0; border-radius: 5px;">
                <h2 style="color: #4a4a4a; text-align: center; border-bottom: 2px solid #4CAF50; padding-bottom: 10px;">‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</h2>
    
                     <p style="color: #4a4a4a; font-size: 16px;">‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏∏‡∏ì <strong>${user.firstname}</strong>,</p>
    
                     <p style="color: #4a4a4a; font-size: 16px;">‡πÄ‡∏£‡∏≤‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏´‡πâ‡∏ó‡πà‡∏≤‡∏ô‡∏ó‡∏£‡∏≤‡∏ö‡∏ß‡πà‡∏≤ ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° <strong style="color: #4CAF50;">"${meetingRoom.room_name}"</strong> ‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß</p>
    
            <div style="background-color: #f9f9f9; border-left: 4px solid #4CAF50; padding: 15px; margin: 20px 0;">
                 <h3 style="color: #4CAF50; margin-top: 0;">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á:</h3>
                    <ul style="list-style-type: none; padding: 0;">
                    <li style="margin-bottom: 10px;">üìÖ <strong>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</strong> ${bookingDate}</li>
                    <li style="margin-bottom: 10px;">üïí <strong>‡πÄ‡∏ß‡∏•‡∏≤:</strong> ${booking.start_time} ‡∏ñ‡∏∂‡∏á ${booking.end_time}</li>
                    <li style="margin-bottom: 10px;">üî¢ <strong>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á:</strong> ${booking.booking_id}</li>
                 </ul>
            </div>
                <p style="color: #4a4a4a; font-size: 16px;">‡∏´‡∏≤‡∏Å‡∏ó‡πà‡∏≤‡∏ô‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á</p>
    
                <p style="color: #4a4a4a; font-size: 16px; margin-top: 20px;">‡∏Ç‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏±‡∏ö‡∏ñ‡∏∑‡∏≠,</p>
                <p style="color: #4a4a4a; font-size: 16px; font-weight: bold;">‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡∏ù‡πà‡∏≤‡∏¢‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°</p>
    
                <div style="text-align: center; margin-top: 20px; padding-top: 20px; border-top: 1px solid #e0e0e0; font-size: 14px; color: #888;">
                <p>‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ myboatnkpt@gmail.com</p>
            </div>
            </div> `;


      const mailOptions = {
        from: process.env.EMAIL_USER,
        to: user.email,
        subject: "‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥",
        html: emailHtml,
      };

      await transporter.sendMail(mailOptions);

      res.status(200).json({
        status: "success",
        message: "‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
      });
    } else {
      res.status(400).json({
        status: "fail",
        message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ô‡∏µ‡πâ",
      });
    }
  } catch (error) {
    res.status(500).json({
      status: "fail",
      message: error.message,
    });
  }
};

// ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
export const rejectBooking = async (req, res) => {
  const bookingId = req.params.id;
  const bookingService = new BookingService();
  const userService = new UserService();
  const meetingRoomService = new MeetingRoomService();

  try {
    const result = await bookingService.updateBookingStatus(bookingId, "cancel");
    if (result.affectedRows > 0) {
      const booking = await bookingService.getBookingById(bookingId);
      if (!booking || !booking.user_id || !booking.room_id) {
        return res.status(404).json({
          status: "fail",
          message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°",
        });
      }


      const user = await userService.getUserById(booking.user_id);
      if (!user || !user.email) {
        return res.status(404).json({
          status: "fail",
          message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ",
        });
      }

      const meetingRoom = await meetingRoomService.getMeetingRoomById(booking.room_id);
      if (!meetingRoom || !meetingRoom.room_name) {
        return res.status(404).json({
          status: "fail",
          message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°",
        });
      }

      const transporter = nodemailer.createTransport({
        service: "gmail",
        auth: {
          user: process.env.EMAIL_USER,
          pass: process.env.EMAIL_PASS,
        },
      });

      const bookingDate = moment(booking.booking_date).format("DD/MM/YYYY");

      const emailHtmlcancel = `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #e0e0e0; border-radius: 5px;">
          <h2 style="color: #4a4a4a; text-align: center; border-bottom: 2px solid #e74c3c; padding-bottom: 10px;">‡πÅ‡∏à‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°</h2>
          <p style="color: #4a4a4a; font-size: 16px;">‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏∏‡∏ì <strong>${user.firstname}</strong>,</p>
          <p style="color: #4a4a4a; font-size: 16px;">‡πÄ‡∏£‡∏≤‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡πÉ‡∏à‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏´‡πâ‡∏ó‡πà‡∏≤‡∏ô‡∏ó‡∏£‡∏≤‡∏ö‡∏ß‡πà‡∏≤ ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° <strong style="color: #e74c3c;">"${meetingRoom.room_name}"</strong> ‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò</p>
          <div style="background-color: #f9f9f9; border-left: 4px solid #e74c3c; padding: 15px; margin: 20px 0;">
              <h3 style="color: #e74c3c; margin-top: 0;">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò:</h3>
              <ul style="list-style-type: none; padding: 0;">
                  <li style="margin-bottom: 10px;">üìÖ <strong>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</strong> ${bookingDate}</li>
                  <li style="margin-bottom: 10px;">üïí <strong>‡πÄ‡∏ß‡∏•‡∏≤:</strong> ${booking.start_time} ‡∏ñ‡∏∂‡∏á ${booking.end_time}</li>
                  <li style="margin-bottom: 10px;">üî¢ <strong>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á:</strong> ${booking.booking_id}</li>
              </ul>
          </div>
          <p style="color: #4a4a4a; font-size: 16px;">‡∏´‡∏≤‡∏Å‡∏ó‡πà‡∏≤‡∏ô‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÉ‡∏´‡∏°‡πà ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á</p>
          <p style="color: #4a4a4a; font-size: 16px; margin-top: 20px;">‡∏Ç‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏±‡∏ö‡∏ñ‡∏∑‡∏≠,</p>
          <p style="color: #4a4a4a; font-size: 16px; font-weight: bold;">‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡∏ù‡πà‡∏≤‡∏¢‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°</p>
          <div style="text-align: center; margin-top: 20px; padding-top: 20px; border-top: 1px solid #e0e0e0; font-size: 14px; color: #888;">
              <p>‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ myboatnkpt@gmail.com</p>
          </div>
        </div>
      `;

      const mailOptions = {
        from: process.env.EMAIL_USER,
        to: user.email,
        subject: "‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò",
        html: emailHtmlcancel,
      };

      await transporter.sendMail(mailOptions);

      await bookingService.deleteBooking(bookingId);


      res.status(200).json({
        status: "success",
        message: "‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
      });
    } else {
      res.status(400).json({
        status: "fail",
        message: "Booking not found",
      });
    }
  } catch (error) {
    res.status(500).json({
      status: "fail",
      message: error.message,
    });
  }
};

export const getPendingBookingsByRoomIdController = async (req, res) => {
  const { room_id } = req.params;
  const bookingService = new BookingService();

  try {
      const pendingBookings = await bookingService.getPendingBookingsByRoomId(room_id);
      if (pendingBookings.length === 0) {
          return res.status(404).json({
              status: 'error',
              message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ô‡∏µ‡πâ',
          });
      }

      res.status(200).json({
          status: 'success',
          bookings: pendingBookings,
      });
  } catch (error) {
      res.status(500).json({
          status: 'fail',
          message: error.message,
      });
  }
};
